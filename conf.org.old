* Miscellaneous
** Minibuffer confirmation promt
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Scrolling mode
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Line highlighting
*** Global line-highlighting mode
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
#+END_SRC
*** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init (beacon-mode 1))
#+END_SRC
** Backup/Autosave
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC
** Menu/Tool/Scroll-Bar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Pretty symbols
#+BEGIN_SRC emacs-lisp
  (when window-system (global-prettify-symbols-mode t))
#+END_SRC
** Startup message
#+BEGIN_SRC emacs-lisp
  ;;(setq inhibit-startup-message t)
#+END_SRC
** Cursor Manipulation
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
** Edit/Reload config
#+BEGIN_SRC emacs-lisp
  (defun visit-config-other-window ()
    (interactive)
    (find-file-other-window "~/.emacs.d/conf.org"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun reload-config ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/conf.org")))
#+END_SRC
** Color highlighting
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
** Window switching
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 1)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts '("a" "s" "d" "f" "j" "k" "l" "'"))
    :bind ([remap other-window] . switch-window))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun split-and-switch-below ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-switch-below)

  (defun split-and-switch-right ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-switch-right)
#+END_SRC
** CamelCase
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** Electric Pairs
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\{ . ?\})
                              (?\[ . ?\])
                              (?\" . ?\")))
  (electric-pair-mode 1)
#+END_SRC
** Colored Delimeters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init (rainbow-delimiters-mode 1))
#+END_SRC
** Hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
** Sudo edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
** Line/Column number on modeline
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** Startup Screen File History
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 16)))
    (setq dashboard-banner-logo-title "Moin"))
#+END_SRC
** Clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-format "%d.%m.%Y %H:%M")
  (display-time-mode 1)
#+END_SRC
** Autocompletion
Requires CMake for irony-install-server, which compiles a bunch of stuff.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))

  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (with-eval-after-load 'company
    (add-hook 'c-mode-hook 'company-mode)
    (add-hook 'c++-mode-hook 'company-mode))
#+END_SRC
** Snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))

  (add-hook 'c-mode-hook 'yas-minor-mode)
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** Kill Ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
** Search
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC
* Terminal
** Standard Terminal
#+BEGIN_SRC emacs-lisp
  (defvar admiral-ansi-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list admiral-ansi-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** Quick-Launch Key
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC
* Commands
** Key chord completion options
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode))
#+END_SRC
** Key chord completion selection menu
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+END_SRC
** File Selection Menu
*** Enable Ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
*** Ido vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** Improved Buffer List
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC
** Dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind ("s-d" . 'dmenu))
#+END_SRC
* Window Manager
** EXWM
#+BEGIN_SRC emacs-lisp
    (use-package exwm
      :ensure t
      :config
      (require 'exwm-config)
      (exwm-config-default))
#+END_SRC
** EXWM System tray
#+BEGIN_SRC emacs-lisp
  (require 'exwm-systemtray)
  (exwm-systemtray-enable)
#+END_SRC
* Org
** Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t)
#+END_SRC
** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Edit special
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Emacs lisp structure template
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** Indent Mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
* PDFs
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config (pdf-tools-install))
#+END_SRC
